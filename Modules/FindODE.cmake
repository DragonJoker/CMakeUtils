FIND_PATH(ODE_ROOT_DIR include/ode/ode.h ode/ode.h
	HINTS
	PATH_SUFFIXES include ode
	PATHS
	/usr/local
	/usr
)

FIND_PATH(ODE_INCLUDE_DIR ode/ode.h
	HINTS
	PATH_SUFFIXES include ode
	PATHS
	${ODE_ROOT_DIR}
)

if(MSVC)
	FIND_PATH(ODE_LIBRARY_DIR_DEBUG ode_singled.lib
		HINTS
		PATH_SUFFIXES lib lib/DebugSingleLib
		PATHS
		${ODE_ROOT_DIR}
	)
	FIND_PATH(ODE_LIBRARY_DIR_RELEASE ode_single.lib
		HINTS
		PATH_SUFFIXES lib lib/ReleaseSingleLib
		PATHS
		${ODE_ROOT_DIR}
	)
	FIND_LIBRARY(ODE_LIBRARY_DEBUG
		NAMES ode_singled.lib
		HINTS
		PATHS
		${ODE_LIBRARY_DIR_DEBUG}
	)
	FIND_LIBRARY(ODE_LIBRARY_RELEASE
		NAMES ode_single.lib
		HINTS
		PATHS
		${ODE_LIBRARY_DIR_RELEASE}
	)
	SET( ODE_LIBRARIES debug ${ODE_LIBRARY_DEBUG} optimized ${ODE_LIBRARY_RELEASE})
	MARK_AS_ADVANCED(${ODE_LIBRARY_DEBUG} ${ODE_LIBRARY_RELEASE} ${ODE_LIBRARY_DIR_DEBUG} ${ODE_LIBRARY_DIR_RELEASE})
else()
	FIND_PATH(ODE_LIBRARY_DIR libode.so ode.lib
		HINTS
		PATH_SUFFIXES lib64 lib
		PATHS
		${ODE_ROOT_DIR}
	)
	FIND_LIBRARY(ODE_LIBRARY
		NAMES libode.so ode.lib
		HINTS
		PATHS
		${ODE_LIBRARY_DIR}
	)
	SET( ODE_LIBRARIES ${ODE_LIBRARY})
	MARK_AS_ADVANCED(${ODE_LIBRARY_DIR})
endif()

find_package_handle_standard_args( ODE DEFAULT_MSG ODE_LIBRARIES ODE_INCLUDE_DIR )
