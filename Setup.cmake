if ( WIN32 )
	option( PROJECTS_PACKAGE_WIX "Build WiX setup" TRUE )
else()
	option( PROJECTS_PACKAGE_DEB "Build Debian package" TRUE )
	option( PROJECTS_PACKAGE_RPM "Build RPM package" FALSE )
endif()

include( CPackComponent )

set( SETUP_ALL_INSTALL_TYPES )
set( USE_CPACK_FUNCS FALSE )

macro( setup_add_install_type _NAME )
	if ( ${USE_CPACK_FUNCS} )
		cpack_add_install_type( ${_NAME} )
	else ()
    list( APPEND CPACK_ALL_INSTALL_TYPES ${_NAME} )
	endif ()
endmacro()

macro(	setup_add_component_group _NAME )# ARGN
	if ( ${USE_CPACK_FUNCS} )
		cpack_add_component_group( ${_NAME} ${ARGN} )
	else ()
		set( _DISPLAY_NAME FALSE )
		set( _DESCRIPTION FALSE )
		string( TOUPPER ${_NAME} _GROUPNAME )
		
		foreach ( _ARG ${ARGN} )
			if ( _ARG STREQUAL "DISPLAY_NAME" )
				set( _DISPLAY_NAME TRUE )
				set( _DESCRIPTION FALSE )
			elseif ( _ARG STREQUAL "DESCRIPTION" )
				set( _DISPLAY_NAME FALSE )
				set( _DESCRIPTION TRUE )
			else ()
				if ( ${_DISPLAY_NAME} )
					message( STATUS "CPACK_COMPONENT_GROUP_${_GROUPNAME}_DISPLAY_NAME" )
					set( CPACK_COMPONENT_GROUP_${_GROUPNAME}_DISPLAY_NAME "${_ARG}" )
					set( _DISPLAY_NAME FALSE )
				elseif ( ${_DESCRIPTION} )
					message( STATUS "CPACK_COMPONENT_GROUP_${_GROUPNAME}_DESCRIPTION" )
					set( CPACK_COMPONENT_GROUP_${_GROUPNAME}_DESCRIPTION "${_ARG}" )
					set( _DESCRIPTION FALSE )
				endif ()
			endif ()
		endforeach ()
	endif ()
endmacro()

macro(	setup_add_component _NAME )# ARGN
	if ( ${USE_CPACK_FUNCS} )
		cpack_add_component( ${_NAME} ${ARGN} )
	else ()
		set( _DISPLAY_NAME FALSE )
		set( _DESCRIPTION FALSE )
		set( _GROUP FALSE )
		set( _DEPENDS FALSE )
		set( _INSTALL_TYPE FALSE )
		set( CPACK_COMPONENTS_ALL
			${CPACK_COMPONENTS_ALL}
			${_NAME}
		)
		string( TOUPPER ${_NAME} _COMPNAME )
		
		foreach ( _ARG ${ARGN} )
			if ( _ARG STREQUAL "DISPLAY_NAME" )
				set( _DISPLAY_NAME TRUE )
				set( _DESCRIPTION FALSE )
				set( _GROUP FALSE )
				set( _DEPENDS FALSE )
				set( _INSTALL_TYPE FALSE )
			elseif ( _ARG STREQUAL "DESCRIPTION" )
				set( _DISPLAY_NAME FALSE )
				set( _DESCRIPTION TRUE )
				set( _GROUP FALSE )
				set( _DEPENDS FALSE )
				set( _INSTALL_TYPE FALSE )
			elseif ( _ARG STREQUAL "GROUP" )
				set( _DISPLAY_NAME FALSE )
				set( _DESCRIPTION FALSE )
				set( _GROUP TRUE )
				set( _DEPENDS FALSE )
				set( _INSTALL_TYPE FALSE )
			elseif ( _ARG STREQUAL "DEPENDS" )
				set( _DISPLAY_NAME FALSE )
				set( _DESCRIPTION FALSE )
				set( _GROUP FALSE )
				set( _DEPENDS TRUE )
				set( _INSTALL_TYPE FALSE )
			elseif ( _ARG STREQUAL "INSTALL_TYPE" )
				set( _DISPLAY_NAME FALSE )
				set( _DESCRIPTION FALSE )
				set( _GROUP FALSE )
				set( _DEPENDS FALSE )
				set( _INSTALL_TYPE TRUE )
			elseif ( _ARG STREQUAL "REQUIRED" )
					message( STATUS "CPACK_COMPONENT_${_COMPNAME}_REQUIRED" )
					set( CPACK_COMPONENT_${_NAME}_REQUIRED TRUE )
			else ()
				if ( ${_DISPLAY_NAME} )
					message( STATUS "CPACK_COMPONENT_${_COMPNAME}_DISPLAY_NAME" )
					set( CPACK_COMPONENT_${_COMPNAME}_DISPLAY_NAME "${_ARG}" )
					set( _DISPLAY_NAME FALSE )
				elseif ( ${_DESCRIPTION} )
					message( STATUS "CPACK_COMPONENT_${_COMPNAME}_DESCRIPTION" )
					set( CPACK_COMPONENT_${_COMPNAME}_DESCRIPTION "${_ARG}" )
					set( _DESCRIPTION FALSE )
				elseif ( ${_GROUP} )
					message( STATUS "CPACK_COMPONENT_${_COMPNAME}_GROUP" )
					set( CPACK_COMPONENT_${_COMPNAME}_GROUP "${_ARG}" )
					set( _GROUP FALSE )
				elseif ( ${_DEPENDS} )
					message( STATUS "CPACK_COMPONENT_${_COMPNAME}_DEPENDS" )
					set( CPACK_COMPONENT_${_COMPNAME}_DEPENDS
						${CPACK_COMPONENT_${_COMPNAME}_DEPENDS}
						${_ARG}
					)
					set( _DEPENDS FALSE )
				elseif ( ${_INSTALL_TYPES} )
					message( STATUS "CPACK_COMPONENT_${_COMPNAME}_INSTALL_TYPE" )
					set( CPACK_COMPONENT_${_COMPNAME}_INSTALL_TYPE
						${CPACK_COMPONENT_${_COMPNAME}_INSTALL_TYPE}
						${_ARG}
					)
					set( _INSTALL_TYPE FALSE )
				endif ()
			endif ()
		endforeach ()
	endif ()
endmacro()

macro( setup_initialise )
	if ( ${USE_CPACK_FUNCS} )
		include( CPack )
	endif ()
endmacro()

macro( setup_finalise )
	if ( NOT ${USE_CPACK_FUNCS} )
		include( CPack )
	endif ()
endmacro()

