include( CompilerVersion )
include( Logging )

if ( CMAKE_CXX_COMPILER_ID STREQUAL "Clang" )
	DumpCompilerVersion( COMPILER_VERSION )
	set( COMPILER "clang${COMPILER_VERSION}" )
elseif ( CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" )
	DumpCompilerVersion( COMPILER_VERSION )
	set( COMPILER "clang${COMPILER_VERSION}" )
elseif ( CMAKE_CXX_COMPILER_ID STREQUAL "GNU" )
	DumpCompilerVersion( COMPILER_VERSION )
	if ( MINGW )
		set( COMPILER "mingw${COMPILER_VERSION}" )
	elseif ( CYGWIN )
		set( COMPILER "cygw${COMPILER_VERSION}" )
	elseif ( APPLE )
		set( COMPILER "xgcc${COMPILER_VERSION}" )
	else ()
		set( COMPILER "gcc${COMPILER_VERSION}" )
	endif ()
elseif ( CMAKE_CXX_COMPILER_ID STREQUAL "Intel" )
	set( COMPILER "icc" )
elseif ( CMAKE_CXX_COMPILER_ID STREQUAL "Borland" )
	set( _ABI_Name "-bcb" )
elseif ( CMAKE_CXX_COMPILER_ID STREQUAL "MSVC" )
	if ( MSVC16 )
		set( COMPILER "vc16" )
	elseif ( MSVC15 )
		set( COMPILER "vc15" )
	elseif ( MSVC14 )
		string( FIND ${CMAKE_CXX_COMPILER_VERSION} "19.10" POS )
		if ( NOT ${POS} STREQUAL -1 )
			set( COMPILER "vc15" )
		else ()
			set( COMPILER "vc14" )
		endif ()
	elseif ( MSVC12 )
		set( COMPILER "vc12" )
	elseif ( MSVC11 )
		set( COMPILER "vc11" )
	elseif ( MSVC10 )
		set( COMPILER "vc10" )
	elseif ( MSVC90 )
		set( COMPILER "vc9" )
	elseif ( MSVC80 )
		set( COMPILER "vc8" )
	elseif ( MSVC71 )
		set( COMPILER "vc7_1" )
	elseif ( MSVC70 )
		set( COMPILER "vc7" )
	elseif ( MSVC60 )
		set( COMPILER "vc6" )
	endif ()
endif()

message( STATUS "COMPILER: [${CMAKE_CXX_COMPILER_ID}]" )

#--------------------------------------------------------------------------------------------------
#	Function :	compute_abi_name
# 	Function which computes the extended library name, with compiler version and debug flag
#--------------------------------------------------------------------------------------------------
function( compute_abi_name ABI_Name ABI_Name_Debug )
	set( _ABI_Name "-${COMPILER}")
	set( _ABI_Name_Debug "-d")
	set( ${ABI_Name} ${_ABI_Name} PARENT_SCOPE )
	set( ${ABI_Name_Debug} ${_ABI_Name_Debug} PARENT_SCOPE )
endfunction( compute_abi_name )